int	get_pixel_color(t_img *img, int x, int y, int width, int height)
{
	char	*dst;

	if (x < 0 || x > width || y < 0 || y > height)
		return (1);
	dst = (char *)img->dump + (y * img->size_l + x * (img->bpp / 8));
	return (*(unsigned int *)dst);
}

// int	get_pixel_color(t_img texture, int offset_x, int offset_y)
// {
// 	int	pixel_color;

// 	if (offset_x < 0 || offset_x > texture.width
// 		|| offset_y < 0 || offset_y > texture_height)
// 		return (1);
// 	pixel_color = texture.dump[(texture.width * offset_y) + offset_x];
// 	return (pixel_color);
// }

void	draw_vert_pixel(t_img *img, int x0, int y0, int thick, int color)
{
	int	i;

	i = -1;
	while (++i < thick)
		my_mlx_pixel_put(img, x0 + i, y0, color);
}

void	fill_color(t_img *img, int color)
{
	int		count_w;
	int		count_h;

	count_h = -1;
	while (++count_h < IMG_HEIGHT)
	{
		count_w = -1;
		while (++count_w < IMG_WIDTH)
			img->dump[count_h * IMG_WIDTH + count_w] = color;
	}
}

void	copy_layer(t_img *img_src, t_img *img_dst, int color)
{
	int		count_w;
	int		count_h;

	count_h = -1;
	while (++count_h < IMG_HEIGHT)
	{
		count_w = -1;
		while (++count_w < IMG_WIDTH)
		{
			if (img_dst->dump[count_h * IMG_WIDTH + count_w] == color)
				img_dst->dump[count_h * IMG_WIDTH + count_w]
					= img_src->dump[count_h * IMG_WIDTH + count_w];
		}
	}
}

void	draw_map(t_data *data)
{
	int		x;
	int		y;
	t_img	*img;
	t_rect	rect;

	rect.width = TILE_SIZE * MINIMAP_SCALE_FACTOR;
	rect.height = TILE_SIZE * MINIMAP_SCALE_FACTOR;
	img = &data->img[MAP];
	y = -1;
	while (++y < map_height(data))
	{
		x = -1;
		while (++x < map_width(data))
		{
			rect.x = x * TILE_SIZE * MINIMAP_SCALE_FACTOR;
			rect.y = y * TILE_SIZE * MINIMAP_SCALE_FACTOR;
			if (ftex_is_in_set(data->map[y][x], "!@"))
				rect.color = WHITE;
			else if (ftex_is_in_set(data->map[y][x], "0N"))
				rect.color = BLACKB;
			else
				continue ;
			draw_rect(img, rect);
		}
	}
}

void	draw_player(t_data *data)
{
	t_img		*img;
	t_player	player;
	t_line		line;

	img = &data->img[PLAYER];
	player = data->player;
	line.x0 = 50 + 115;
	line.y0 = (WIN_HEIGHT - 270) + 115;
	line.x1 = line.x0 + cos(player.rot_angle) * 15;
	line.y1 = line.y0 + sin(player.rot_angle) * 15;
	line.color = YELLOW;
	draw_line(img, line);
}
